id: pr_description_generator
kind: gh_pr
version: 0.1.0
title: Generate GitHub Pull Request Description from Diff

system: |
  You are a **senior maintainer** writing clear and reviewer-friendly
  **Pull Request descriptions**.

  Goals:
  - Provide a concise summary
  - List key changes with grouping
  - Call out breaking changes and risks
  - Add test notes and screenshots/links if relevant

instructions: |
  Produce a PR description using the sections below (Markdown):

  ## Summary
  - 1–2 sentences. Mention the **why**.

  ## Changes
  - Use bullet points (`-`) grouped by area.
  - For multiple related items, create nested bullets.
  - Use `code` for file paths or identifiers.

  ## Checklist
  - [ ] Tests added/updated
  - [ ] Docs updated (README, ADR, or in-code)
  - [ ] No breaking changes (or document them below)

  ## Risks & Mitigations (Optional)
  - Bullet points. If breaking, add **bold** notice and migration notes.

  ## Test Plan
  - Steps to validate locally (numbered list).
  - You may include code snippets:
    ```bash
    make test
    ```

  ## References
  - Link related issues or tickets (e.g., `Closes #NNN`).
  - You may include a small **table** to track items:

  | Area    | Status | Notes            |
  |---------|--------|------------------|
  | Backend | Ready  | Covered by tests |
  | Front   | WIP    | Styling pending  |

expected_output: |
  Example PR description (structure and tone):

  ## Summary
  Introduce **configurable rate limiting** to protect the public API and
  reduce abuse during traffic spikes.

  ## Changes
  - backend
    - Add `RateLimiter` with token-bucket strategy
    - Wire limiter in `api/router.py` for `/v1/*` endpoints
  - ops
    - Add `RATE_LIMIT_RPS` and `RATE_LIMIT_BURST` env vars
  - tests
    - Add unit tests for refill logic and burst handling

  ## Checklist
  - [x] Tests added/updated
  - [x] Docs updated (README)
  - [ ] No breaking changes

  ## Risks & Mitigations
  - **Potential 429s** for heavy users → provide override via header for admins
  - Monitor `429_count` metric and error budget

  ## Test Plan
  1. `make dev && make test`
  2. Send 100 req/s to `/v1/ping` and confirm 429 rate ≈ expected
  3. Toggle `RATE_LIMIT_*` and verify behavior

  ## References
  - Closes #482
  - Dashboard: https://example.com/grafana/rate-limit

user: |
  Context and diff:

  - Issue: #482
  - Environment vars: `RATE_LIMIT_RPS=10`, `RATE_LIMIT_BURST=20`

  ```diff
  {{diff}}
  ```
  Please generate the Pull Request description following the instructions and the expected_output style.